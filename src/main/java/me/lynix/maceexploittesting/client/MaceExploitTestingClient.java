package me.lynix.maceexploittesting.client;

import me.lynix.maceexploittesting.event.PacketSendEvent;
import me.lynix.maceexploittesting.mixini.IPlayerInteractEntityC2SPacket;
import me.lynix.maceexploittesting.mixini.IPlayerMoveC2SPacket;
import net.fabricmc.api.ClientModInitializer;
import net.fabricmc.fabric.api.client.event.lifecycle.v1.ClientTickEvents;
import net.fabricmc.fabric.api.client.keybinding.v1.KeyBindingHelper;
import net.minecraft.block.Blocks;
import net.minecraft.client.MinecraftClient;
import net.minecraft.client.option.KeyBinding;
import net.minecraft.client.util.InputUtil;
import net.minecraft.entity.Entity;
import net.minecraft.network.packet.c2s.play.HandSwingC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractEntityC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.text.Text;
import net.minecraft.util.ActionResult;
import org.lwjgl.glfw.GLFW;

public class MaceExploitTestingClient implements ClientModInitializer {

    private static KeyBinding keyBinding;
    private static KeyBinding keyBinding2;
    public static MinecraftClient mc;

    private PlayerInteractEntityC2SPacket attackPacket;
    private HandSwingC2SPacket swingPacket;


    private int sendTimer;
    private boolean sendPackets;
    @Override
    public void onInitializeClient() {
        attackPacket = null;
        swingPacket = null;
        sendTimer = 0;
        sendPackets = false;
        mc = MinecraftClient.getInstance();
        System.out.println("Hello, maceexploittesting client!");

        keyBinding = KeyBindingHelper.registerKeyBinding(new KeyBinding(
                "key.maceexploittesting.test", // The translation key of the keybinding's name
                InputUtil.Type.KEYSYM, // The type of the keybinding, KEYSYM for keyboard, MOUSE for mouse.
                GLFW.GLFW_KEY_R, // The keycode of the key
                "category.maceexploittesting.test" // The translation key of the keybinding's category.
        ));

        ClientTickEvents.END_CLIENT_TICK.register(client -> {
            /*if (mc.player == null) return;
            if (!mc.player.getWorld().getBlockState(mc.player.getBlockPos().down()).isOf(Blocks.AIR)) {
                mc.player.setPos(mc.player.getX(), mc.player.getBlockPos().down().getY() + 0.5, mc.player.getZ());
            }*/
            while (keyBinding.wasPressed()) {
                assert mc.player != null;
                client.player.sendMessage(Text.literal(String.valueOf(mc.player.fallDistance)), false);
            }
        });
        keyBinding2 = KeyBindingHelper.registerKeyBinding(new KeyBinding(
                "key.maceexploittesting.test2", // The translation key of the keybinding's name
                InputUtil.Type.KEYSYM, // The type of the keybinding, KEYSYM for keyboard, MOUSE for mouse.
                GLFW.GLFW_KEY_G, // The keycode of the key
                "category.maceexploittesting.test2" // The translation key of the keybinding's category.
        ));

        ClientTickEvents.END_CLIENT_TICK.register(client -> {
            while (keyBinding2.wasPressed()) {
                mc.player.setPos(mc.player.getX(), mc.player.getY() + 70, mc.player.getZ());
                mc.player.setVelocity(mc.player.getVelocity().x, -8, mc.player.getVelocity().z);
                assert mc.player != null;
                client.player.sendMessage(Text.literal(String.valueOf(mc.player.fallDistance)), false);
            }
        });

        PacketSendEvent.EVENT.register((packeta) -> {
            if (packeta instanceof IPlayerInteractEntityC2SPacket packet && packet.getType() == PlayerInteractEntityC2SPacket.InteractType.ATTACK) {

                Entity entity = packet.getEntity();

                sendPacket(100);
                sendPacket(0);
            }
            return ActionResult.PASS;
        });

        ClientTickEvents.START_CLIENT_TICK.register(client -> {
            if (sendPackets) {
                if (sendTimer <= 0) {
                    sendPackets = false;

                    if (attackPacket == null || swingPacket == null) return;
                    mc.getNetworkHandler().sendPacket(attackPacket);
                    mc.getNetworkHandler().sendPacket(swingPacket);

                    attackPacket = null;
                    swingPacket = null;
                } else {
                    sendTimer--;
                }
            }
        });
    }
    private void sendPacket(double height) {
        double x = mc.player.getX();
        double y = mc.player.getY();
        double z = mc.player.getZ();

        PlayerMoveC2SPacket packet = new PlayerMoveC2SPacket.PositionAndOnGround(x, y + height, z, false);
        ((IPlayerMoveC2SPacket) packet).setTag(1337);

        mc.player.networkHandler.sendPacket(packet);
    }

}
